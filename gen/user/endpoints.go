// Code generated by goa v3.3.1, DO NOT EDIT.
//
// user endpoints
//
// Command:
// $ goa gen github.com/ebalkanski/goa/design

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "user" service endpoints.
type Endpoints struct {
	Fetch    goa.Endpoint
	FetchAll goa.Endpoint
	Create   goa.Endpoint
	Edit     goa.Endpoint
	Delete   goa.Endpoint
}

// NewEndpoints wraps the methods of the "user" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Fetch:    NewFetchEndpoint(s),
		FetchAll: NewFetchAllEndpoint(s),
		Create:   NewCreateEndpoint(s),
		Edit:     NewEditEndpoint(s),
		Delete:   NewDeleteEndpoint(s),
	}
}

// Use applies the given middleware to all the "user" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Fetch = m(e.Fetch)
	e.FetchAll = m(e.FetchAll)
	e.Create = m(e.Create)
	e.Edit = m(e.Edit)
	e.Delete = m(e.Delete)
}

// NewFetchEndpoint returns an endpoint function that calls the method "fetch"
// of service "user".
func NewFetchEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FetchPayload)
		return s.Fetch(ctx, p)
	}
}

// NewFetchAllEndpoint returns an endpoint function that calls the method
// "fetchAll" of service "user".
func NewFetchAllEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FetchAll(ctx)
	}
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "user".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*User)
		return nil, s.Create(ctx, p)
	}
}

// NewEditEndpoint returns an endpoint function that calls the method "edit" of
// service "user".
func NewEditEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*User)
		return nil, s.Edit(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "user".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}
