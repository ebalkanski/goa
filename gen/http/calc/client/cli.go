// Code generated by goa v3.3.1, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen github.com/ebalkanski/goa/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	calc "github.com/ebalkanski/goa/gen/calc"
)

// BuildAddPayload builds the payload for the calc add endpoint from CLI flags.
func BuildAddPayload(calcAddA string, calcAddB string) (*calc.AddPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcAddA, 10, 64)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcAddB, 10, 64)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	v := &calc.AddPayload{}
	v.A = a
	v.B = b

	return v, nil
}

// BuildRatePayload builds the payload for the calc rate endpoint from CLI
// flags.
func BuildRatePayload(calcRateBody string, calcRateID string) (*calc.RatePayload, error) {
	var err error
	var body map[string]float64
	{
		err = json.Unmarshal([]byte(calcRateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"Eum ad aliquam quibusdam.\": 0.896909608914096,\n      \"Labore eaque consectetur.\": 0.7825375932190489,\n      \"Omnis veritatis id iure repellat.\": 0.572528816078871\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(calcRateID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := make(map[string]float64, len(body))
	for key, val := range body {
		tk := key
		tv := val
		v[tk] = tv
	}
	res := &calc.RatePayload{
		Rates: v,
	}
	res.ID = &id

	return res, nil
}
