// Code generated by goa v3.3.1, DO NOT EDIT.
//
// user client HTTP transport
//
// Command:
// $ goa gen github.com/ebalkanski/goa/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the user service endpoint HTTP clients.
type Client struct {
	// Fetch Doer is the HTTP client used to make requests to the fetch endpoint.
	FetchDoer goahttp.Doer

	// FetchAll Doer is the HTTP client used to make requests to the fetchAll
	// endpoint.
	FetchAllDoer goahttp.Doer

	// Create Doer is the HTTP client used to make requests to the create endpoint.
	CreateDoer goahttp.Doer

	// Edit Doer is the HTTP client used to make requests to the edit endpoint.
	EditDoer goahttp.Doer

	// Delete Doer is the HTTP client used to make requests to the delete endpoint.
	DeleteDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the user service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		FetchDoer:           doer,
		FetchAllDoer:        doer,
		CreateDoer:          doer,
		EditDoer:            doer,
		DeleteDoer:          doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Fetch returns an endpoint that makes HTTP requests to the user service fetch
// server.
func (c *Client) Fetch() goa.Endpoint {
	var (
		decodeResponse = DecodeFetchResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFetchRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FetchDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "fetch", err)
		}
		return decodeResponse(resp)
	}
}

// FetchAll returns an endpoint that makes HTTP requests to the user service
// fetchAll server.
func (c *Client) FetchAll() goa.Endpoint {
	var (
		decodeResponse = DecodeFetchAllResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFetchAllRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FetchAllDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "fetchAll", err)
		}
		return decodeResponse(resp)
	}
}

// Create returns an endpoint that makes HTTP requests to the user service
// create server.
func (c *Client) Create() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateRequest(c.encoder)
		decodeResponse = DecodeCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "create", err)
		}
		return decodeResponse(resp)
	}
}

// Edit returns an endpoint that makes HTTP requests to the user service edit
// server.
func (c *Client) Edit() goa.Endpoint {
	var (
		encodeRequest  = EncodeEditRequest(c.encoder)
		decodeResponse = DecodeEditResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEditRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EditDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "edit", err)
		}
		return decodeResponse(resp)
	}
}

// Delete returns an endpoint that makes HTTP requests to the user service
// delete server.
func (c *Client) Delete() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "delete", err)
		}
		return decodeResponse(resp)
	}
}
