// Code generated by goa v3.3.1, DO NOT EDIT.
//
// user HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/ebalkanski/goa/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	user "github.com/ebalkanski/goa/gen/user"
	goahttp "goa.design/goa/v3/http"
)

// BuildFetchRequest instantiates a HTTP request object with method and path
// set to call the "user" service "fetch" endpoint
func (c *Client) BuildFetchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*user.FetchPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("user", "fetch", "*user.FetchPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FetchUserPath(name)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "fetch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFetchResponse returns a decoder for responses returned by the user
// fetch endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeFetchResponse may return the following errors:
//	- "BadRequest" (type *user.GoaError): http.StatusBadRequest
//	- "InternalServerError" (type *user.GoaError): http.StatusInternalServerError
//	- error: internal error
func DecodeFetchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FetchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "fetch", err)
			}
			err = ValidateFetchResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "fetch", err)
			}
			res := NewFetchUserOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body FetchBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "fetch", err)
			}
			err = ValidateFetchBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "fetch", err)
			}
			return nil, NewFetchBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body FetchInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "fetch", err)
			}
			err = ValidateFetchInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "fetch", err)
			}
			return nil, NewFetchInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "fetch", resp.StatusCode, string(body))
		}
	}
}

// BuildFetchAllRequest instantiates a HTTP request object with method and path
// set to call the "user" service "fetchAll" endpoint
func (c *Client) BuildFetchAllRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FetchAllUserPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "fetchAll", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFetchAllResponse returns a decoder for responses returned by the user
// fetchAll endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeFetchAllResponse may return the following errors:
//	- "InternalServerError" (type *user.GoaError): http.StatusInternalServerError
//	- error: internal error
func DecodeFetchAllResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FetchAllResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "fetchAll", err)
			}
			err = ValidateFetchAllResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "fetchAll", err)
			}
			res := NewFetchAllResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body FetchAllInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "fetchAll", err)
			}
			err = ValidateFetchAllInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "fetchAll", err)
			}
			return nil, NewFetchAllInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "fetchAll", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "user" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the user create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.User)
		if !ok {
			return goahttp.ErrInvalidType("user", "create", "*user.User", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("user", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the user
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateResponse may return the following errors:
//	- "BadRequest" (type *user.GoaError): http.StatusBadRequest
//	- "InternalServerError" (type *user.GoaError): http.StatusInternalServerError
//	- error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "create", err)
			}
			err = ValidateCreateInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "create", err)
			}
			return nil, NewCreateInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildEditRequest instantiates a HTTP request object with method and path set
// to call the "user" service "edit" endpoint
func (c *Client) BuildEditRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EditUserPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "edit", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEditRequest returns an encoder for requests sent to the user edit
// server.
func EncodeEditRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.User)
		if !ok {
			return goahttp.ErrInvalidType("user", "edit", "*user.User", v)
		}
		body := NewEditRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("user", "edit", err)
		}
		return nil
	}
}

// DecodeEditResponse returns a decoder for responses returned by the user edit
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeEditResponse may return the following errors:
//	- "BadRequest" (type *user.GoaError): http.StatusBadRequest
//	- "InternalServerError" (type *user.GoaError): http.StatusInternalServerError
//	- error: internal error
func DecodeEditResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body EditBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "edit", err)
			}
			err = ValidateEditBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "edit", err)
			}
			return nil, NewEditBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body EditInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "edit", err)
			}
			err = ValidateEditInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "edit", err)
			}
			return nil, NewEditInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "edit", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "user" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*user.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("user", "delete", "*user.DeletePayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserPath(name)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the user
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "BadRequest" (type *user.GoaError): http.StatusBadRequest
//	- "InternalServerError" (type *user.GoaError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "delete", err)
			}
			err = ValidateDeleteInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "delete", err)
			}
			return nil, NewDeleteInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "delete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseBodyToUserUser builds a value of type *user.User from a
// value of type *UserResponseBody.
func unmarshalUserResponseBodyToUserUser(v *UserResponseBody) *user.User {
	if v == nil {
		return nil
	}
	res := &user.User{
		Name: *v.Name,
		Age:  *v.Age,
	}

	return res
}
