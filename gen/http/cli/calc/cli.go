// Code generated by goa v3.3.1, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen github.com/ebalkanski/goa/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	playc "github.com/ebalkanski/goa/gen/http/play/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `play (add|rate)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` play add --a 1 --b 2` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		playFlags = flag.NewFlagSet("play", flag.ContinueOnError)

		playAddFlags = flag.NewFlagSet("add", flag.ExitOnError)
		playAddAFlag = playAddFlags.String("a", "REQUIRED", "Left operand")
		playAddBFlag = playAddFlags.String("b", "REQUIRED", "Right operand")

		playRateFlags    = flag.NewFlagSet("rate", flag.ExitOnError)
		playRateBodyFlag = playRateFlags.String("body", "REQUIRED", "")
		playRateIDFlag   = playRateFlags.String("id", "REQUIRED", "")
	)
	playFlags.Usage = playUsage
	playAddFlags.Usage = playAddUsage
	playRateFlags.Usage = playRateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "play":
			svcf = playFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "play":
			switch epn {
			case "add":
				epf = playAddFlags

			case "rate":
				epf = playRateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "play":
			c := playc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = playc.BuildAddPayload(*playAddAFlag, *playAddBFlag)
			case "rate":
				endpoint = c.Rate()
				data, err = playc.BuildRatePayload(*playRateBodyFlag, *playRateIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// playUsage displays the usage of the play command and its subcommands.
func playUsage() {
	fmt.Fprintf(os.Stderr, `The play service is a sandbox for goa testing
Usage:
    %s [globalflags] play COMMAND [flags]

COMMAND:
    add: Add implements add.
    rate: Rate implements rate.

Additional help:
    %s play COMMAND --help
`, os.Args[0], os.Args[0])
}
func playAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] play add -a INT -b INT

Add implements add.
    -a INT: Left operand
    -b INT: Right operand

Example:
    `+os.Args[0]+` play add --a 1 --b 2
`, os.Args[0])
}

func playRateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] play rate -body JSON -id INT

Rate implements rate.
    -body JSON: 
    -id INT: 

Example:
    `+os.Args[0]+` play rate --body '{
      "a": 1.1,
      "b": 2.2
   }' --id 1
`, os.Args[0])
}
